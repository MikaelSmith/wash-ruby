var search_data = {"index":{"searchIndex":["wash","entry","execoutputstreamer","method","streamer","attributes()","cache_ttls()","enable_entry_schemas()","is_singleton()","label()","meta_attribute_schema()","metadata_schema()","new()","on_sigterm()","parent_of()","prefetch()","prefetch_entry_schemas()","pretty_print()","run()","schema()","slash_replacer()","state()","to_json()","type_id()","write()","write_stderr()","write_stdout()"],"longSearchIndex":["wash","wash::entry","wash::execoutputstreamer","wash::method","wash::streamer","wash::entry::attributes()","wash::entry#cache_ttls()","wash::enable_entry_schemas()","wash::entry::is_singleton()","wash::entry::label()","wash::entry::meta_attribute_schema()","wash::entry::metadata_schema()","wash::streamer::new()","wash::on_sigterm()","wash::entry::parent_of()","wash::entry#prefetch()","wash::prefetch_entry_schemas()","wash::pretty_print()","wash::run()","wash::entry#schema()","wash::entry::slash_replacer()","wash::entry::state()","wash::entry#to_json()","wash::entry#type_id()","wash::streamer#write()","wash::execoutputstreamer#write_stderr()","wash::execoutputstreamer#write_stdout()"],"info":[["Wash","","Wash.html","",""],["Wash::Entry","","Wash/Entry.html","","<p>Entry represents a common base class for Wash entries. All plugin entries should extend this class.\n"],["Wash::ExecOutputStreamer","","Wash/ExecOutputStreamer.html","","<p>Exec is a class meant to be used by implementations of Wash::Entry#exec.\n"],["Wash::Method","","Wash/Method.html","",""],["Wash::Streamer","","Wash/Streamer.html","","<p>Streamer is a class meant to be used by implementations of Wash::Entry#stream.\n"],["attributes","Wash::Entry","Wash/Entry.html#method-c-attributes","(attr, *attrs)","<p>attributes is a class-level tag specifying all the attributes that make sense for instances of this specific …\n"],["cache_ttls","Wash::Entry","Wash/Entry.html#method-i-cache_ttls","(ttls = {})","<p>cache_ttls sets the cache TTLs (time-to-live) of the given methods.\n<p>@example\n\n<pre>class Foo\n  def initialize(content_size) ...</pre>\n"],["enable_entry_schemas","Wash","Wash.html#method-c-enable_entry_schemas","()","<p>enable_entry_schemas enables Entry schema support. See Wash::Entry&#39;s documentation for more details …\n"],["is_singleton","Wash::Entry","Wash/Entry.html#method-c-is_singleton","()","<p>is_singleton is a class-level tag indicating that the given Entry&#39;s a singleton. It is a helper for …\n"],["label","Wash::Entry","Wash/Entry.html#method-c-label","(l)","<p>label is a class-level tag specifying the entry&#39;s label. It is a helper for Entry schemas.\n<p>@param …\n"],["meta_attribute_schema","Wash::Entry","Wash/Entry.html#method-c-meta_attribute_schema","(schema)","<p>meta_attribute_schema sets the meta attribute&#39;s schema to schema. It is a helper for Entry schemas. …\n"],["metadata_schema","Wash::Entry","Wash/Entry.html#method-c-metadata_schema","(schema)","<p>metadata_schema sets the metadata schema to schema. It is a helper for Entry schemas.\n<p>@param schema A …\n"],["new","Wash::Streamer","Wash/Streamer.html#method-c-new","()",""],["on_sigterm","Wash","Wash.html#method-c-on_sigterm","(&block)","<p>on_sigterm will execute the provided block when the plugin script receives a SIGTERM/SIGINT signal.  …\n"],["parent_of","Wash::Entry","Wash/Entry.html#method-c-parent_of","(child_klass, *child_klasses)","<p>parent_of indicates that this kind of Entry is the parent of the given child classes (i.e. child entries). …\n"],["prefetch","Wash::Entry","Wash/Entry.html#method-i-prefetch","(method, *methods)","<p>prefetch indicates that the given methods should be prefetched. This means that the gem will invoke those …\n"],["prefetch_entry_schemas","Wash","Wash.html#method-c-prefetch_entry_schemas","()","<p>prefetch_entry_schemas enables schema-prefetching. This option should be enabled once external plugin …\n"],["pretty_print","Wash","Wash.html#method-c-pretty_print","()","<p>pretty_print enables pretty printing of methods that produce JSON output. It is a useful debugging tool. …\n"],["run","Wash","Wash.html#method-c-run","(root_klass, argv)","<p>run is the plugin script&#39;s run function. All plugin scripts using this gem should invoke this function …\n"],["schema","Wash::Entry","Wash/Entry.html#method-i-schema","()","<p>schema returns the entry&#39;s schema. It should not be overridden.\n"],["slash_replacer","Wash::Entry","Wash/Entry.html#method-c-slash_replacer","(char)","<p>slash_replacer is a class-level tag that specifies the slash replacer. It should only be used if there …\n"],["state","Wash::Entry","Wash/Entry.html#method-c-state","(field, *fields)","<p>state is a class-level tag that specifies the minimum state required to reconstruct all instances of …\n"],["to_json","Wash::Entry","Wash/Entry.html#method-i-to_json","(*)",""],["type_id","Wash::Entry","Wash/Entry.html#method-i-type_id","()","<p>type_id returns the entry&#39;s type ID, which is its fully-qualified class name.\n"],["write","Wash::Streamer","Wash/Streamer.html#method-i-write","(chunk)","<p>write writes the given chunk to STDOUT then flushes it to ensure that Wash receives the data. If the …\n"],["write_stderr","Wash::ExecOutputStreamer","Wash/ExecOutputStreamer.html#method-i-write_stderr","(chunk)","<p>write_stderr writes the given chunk to STDERR then flushes it to ensure that Wash receives the data. …\n"],["write_stdout","Wash::ExecOutputStreamer","Wash/ExecOutputStreamer.html#method-i-write_stdout","(chunk)","<p>write_stdout writes the given chunk to STDOUT then flushes it to ensure that Wash receives the data. …\n"]]}}